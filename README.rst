Introduction
============

Transmogrifier blueprints that look at how html items are linked to gather metadata
about items. They can help you restructure your content.


transmogrify.siteanalyser.urltidy
=================================
Will  normalize ids in urls to be suitable for adding to plone.

The following will tidy up the URLs based on a TALES expression ::

 $> bin/funnelweb --urltidy:link_expr="python:item['_path'].endswith('.html') and item['_path'][:-5] or item['_path']"

If you'd like to move content around before it's uploaded you can use the urltidy step as well e.g. ::

 $> bin/funnelweb --urltidy:link_expr=python:item['_path'].startswith('/news') and '/otn/news'+item['path'][5:] or item['_path']


Options
-------

condition
  TAL Expression to apply transform

locale
  TAL Expression to return the locale used for id normalisation. e.g. 'string:en'

link_expr
  TAL Expression to alter the items '_path'

use_title
  Condition TAL Expression to change the end path element to a normalised version of item['_title']



transmogrify.siteanalyser.attach
================================
Find items and move them if they are tightly linked to a single page. For example if an image
is located in an images folder, but is only referenced from a single img element on a page in
/page then the image will be 'merged' with the page.
How the merge occurs depends on the 'fields' setting. Merging can either be moving the content
of the subitem into a field of the parent item, or it can be via containment.



or the following will only move attachments that are images and use ``index-html`` as the new
name for the default page of the newly created folder ::

  [funnelweb]
  recipe = funnelweb
  attachmentguess-condition = python: subitem.get('_type') in ['Image']
  attachmentguess-defaultpage = index-html

Options
-------

fields
  TAL Expression to return the a dictionary of changes to ``item``. It will use ``item``, ``subitem`` and ``i`` variables.
  e.g. python:{'attachment':subitem['text']}. This will be called for all subitems. The subitems will be deleted.

condition
  TAL Expression to apply transform
  (default='python:True')

defaultpage
  (default='index-html')



transmogrify.siteanalyser.title
===============================

This blueprint will take the _backlinks from the item generated by webcrawler
and if no Title field has been given to the item it will attempt to guess
it from the link names that linked to this document.
You can specify an option 'ignore' option to specify titles never to use

If it can't guess it from the backlinks it will default to using the file name after
cleaning it up somewhat

Options
-------

condition
  TAL Expression to apply transform

ignore
  New line seperated list of strings which won't be use as titles. Defaults to 'next','previous'


transmogrify.siteanalyser.sitemapper
====================================
Rearrange content based on snippets of html arranged as a navigation tree or sitemap.
A navigation tree is a set of href links arranged in nested html.

Options
-------

field
  Name of a field from item which contains a sitemap

field_expr
  Expression to determine the field which contains a sitemap

condition
  Don't move this item

transmogrify.siteanalyser.hidefromnav
=====================================

This blueprint will guess which folders should be hidden from the navigation tree.
It does this by one of three rules

1. Gather all links in the _template html left over after content extraction
and assume anything linked from outside the content should have their folders shown and
anything else should be hidden. #TODO
2. Any folders with content found only via img links will also be hidden. #TODO
3. The condition to set to tree for the item to hide

Options
-------

key
  Default is '_exclude-from-navigation'.

condition
  Default is 'python:False'

template_key
  #TODO
  Default is '_template'

hide_img_folders
  #TODO
  Default is 'True'


transmogrify.siteanalyser.defaultpage
=====================================
To determine if an item is a default page for a container (it has many links
to items in that container, even if not contained in that folder), and then move
it to that folder.

Options
-------

mode
  'links' or 'path' (default=links).
  'links' mode uses links
  to determine if a item is a defaultpage of a subtree by looking at it's links.
  'path' mode uses parent_path expression to
  determine if an item is a defaultpage of that parent.

min_links
  If a page has as at least this number of links that point to content in a folder
  then move it there and make it the defaultpage. (default=2)

max_uplinks
  If a page has more than max_uplinks it won't be moved. (default=2)

parent_path
        Rule is defined by entered
        parent_path option which is expression with access to item,
        transmogrifier, name, options and modules variables.
        Returned value is used to find possible parent item by path. If found,
        item is moved to that parent item, parent item _defaultpage key is set
        appropriately, and we turn to processing another item in a pipeline. So
        the first item in pipeline will take precedence in case parent_path rule
        returns more than one item for the same parent.

condition
  default=python:True


transmogrify.siteanalyser.relinker
==================================
Help restructure your content.
If you'd like to move content from one path to another then in a
previous blueprints adjust the '_path' to the new path. Create a new field
called '_origin' and put the old path into that. Once you pass it through
the relinker all href, img tags etc will be changed in any html content where they
pointed to content that has since moved. All '_origin' fields will be removed
after relinking.